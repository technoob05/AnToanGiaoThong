import os
import re
import json
from zipfile import ZipFile
from docx import Document

# üëâ Thay ƒë∆∞·ªùng d·∫´n th·∫≠t c·ªßa b·∫°n ·ªü ƒë√¢y
DOCX_PATH = r"D:\react-ai-template-main\public\HangA1.docx"
EXTRACT_DIR = r"D:\react-ai-template-main\public\extracted"
IMAGE_DIR   = os.path.join(EXTRACT_DIR, "images")
JSON_OUTPUT = os.path.join(EXTRACT_DIR, "questions_with_images.json")

# T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
os.makedirs(IMAGE_DIR, exist_ok=True)

# 1. Tr√≠ch xu·∫•t ·∫£nh t·ª´ DOCX
def extract_images(docx_path, extract_to, image_dir):
    with ZipFile(docx_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)
    media_folder = os.path.join(extract_to, "word", "media")
    images = []
    if os.path.isdir(media_folder):
        for img_name in sorted(os.listdir(media_folder)):
            src = os.path.join(media_folder, img_name)
            dst = os.path.join(image_dir, img_name)
            with open(src, 'rb') as fsrc, open(dst, 'wb') as fdst:
                fdst.write(fsrc.read())
            images.append(dst)
    return images

# 2. ƒê·ªçc v√† parse c√¢u h·ªèi, options, explanation, g√°n ·∫£nh
def parse_questions(docx_path, image_paths):
    doc = Document(docx_path)
    questions = []
    current = None
    img_idx = 0

    for para in doc.paragraphs:
        text = para.text.strip()
        # B·∫Øt ƒë·∫ßu c√¢u h·ªèi m·ªõi
        m = re.match(r"C√¢u( h·ªèi)?\s*(\d+):\s*(.*)", text)
        if m:
            # L∆∞u c√¢u tr∆∞·ªõc
            if current:
                questions.append(current)
            # T·∫°o m·ªõi
            current = {
                "id": int(m.group(2)),
                "question": m.group(3),
                "options": [],
                "image": None,
                "explanation": None
            }
            continue

        # N·∫øu l√† option
        if current and re.match(r"^(1\.|2\.|3\.|4\.|C·∫£ √Ω|C·∫£ hai)", text):
            current["options"].append(text)
            continue

        # N·∫øu l√† explanation
        if current and text.lower().startswith("gi·∫£i th√≠ch"):
            current["explanation"] = text.split(":",1)[1].strip()
            continue

        # N·∫øu l√† ·∫£nh (xu·∫•t hi·ªán trong XML)
        if current and para._element.xml.find("<w:drawing") != -1:
            if img_idx < len(image_paths):
                current["image"] = os.path.basename(image_paths[img_idx])
                img_idx += 1
            continue

        # N·∫øu l√† ph·∫ßn n·ªëi ti·∫øp c·ªßa question (kh√¥ng ph·∫£i option/explanation)
        if current and not current["explanation"] and text:
            current["question"] += " " + text

    # Th√™m c√¢u cu·ªëi
    if current:
        questions.append(current)
    return questions

if __name__ == "__main__":
    # 1) Tr√≠ch ·∫£nh
    imgs = extract_images(DOCX_PATH, EXTRACT_DIR, IMAGE_DIR)
    # 2) Parse c√¢u h·ªèi
    qs = parse_questions(DOCX_PATH, imgs)
    # 3) L∆∞u JSON
    with open(JSON_OUTPUT, "w", encoding="utf-8") as f:
        json.dump(qs, f, ensure_ascii=False, indent=2)
    print(f"‚úÖ Ho√†n t·∫•t: {len(qs)} c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c xu·∫•t ra\n- JSON: {JSON_OUTPUT}\n- ·∫¢nh: {IMAGE_DIR}")
